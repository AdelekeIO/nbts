--- compiler/checker.ts
+++ compiler/checker.ts
@@ -3128,6 +3128,13 @@
                         appendSymbolNameOnly(symbol, writer);
                     }
                     parentSymbol = symbol;
+
+                    // nbts: Parent may actually be an alias to a class/interface, not a
+                    // class/interface itself (TS issue #5464)
+                    if ((parentSymbol.flags & (SymbolFlags.Alias | SymbolFlags.Class | SymbolFlags.Interface))
+                            === SymbolFlags.Alias) {
+                        parentSymbol = resolveAlias(parentSymbol);
+                    }
                 }
 
                 // Let the writer know we just wrote out a symbol.  The declaration emitter writer uses
--- services/completions.ts
+++ services/completions.ts
@@ -124,6 +124,7 @@
             kind: SymbolDisplay.getSymbolKind(typeChecker, symbol, location),
             kindModifiers: SymbolDisplay.getSymbolModifiers(symbol),
             sortText: "0",
+            type: typeChecker.typeToString(typeChecker.getTypeOfSymbolAtLocation(symbol, location))
         };
     }
 
--- services/goToDefinition.ts
+++ services/goToDefinition.ts
@@ -73,7 +73,9 @@
             const shorthandSymbolName = typeChecker.symbolToString(shorthandSymbol);
             const shorthandContainerName = typeChecker.symbolToString(symbol.parent, node);
             return map(shorthandDeclarations,
-                declaration => createDefinitionInfo(declaration, shorthandSymbolKind, shorthandSymbolName, shorthandContainerName));
+                // netbeanstypescript edit - node kind is more useful to distinguish the decls
+                //declaration => createDefinitionInfo(declaration, shorthandSymbolKind, shorthandSymbolName, shorthandContainerName));
+                declaration => createDefinitionInfo(declaration, getNodeKind(declaration), shorthandSymbolName, shorthandContainerName));
         }
 
         // If the current location we want to find its definition is in an object literal, try to get the contextual type for the
@@ -159,7 +161,9 @@
             !tryAddCallSignature(symbol, node, symbolKind, symbolName, containerName, result)) {
             // Just add all the declarations.
             forEach(declarations, declaration => {
-                result.push(createDefinitionInfo(declaration, symbolKind, symbolName, containerName));
+                // netbeanstypescript edit - node kind is more useful to distinguish the decls
+                //result.push(createDefinitionInfo(declaration, symbolKind, symbolName, containerName));
+                result.push(createDefinitionInfo(declaration, getNodeKind(declaration), symbolName, containerName));
             });
         }
 
--- services/types.ts
+++ services/types.ts
@@ -654,6 +654,7 @@
         kind: string;            // see ScriptElementKind
         kindModifiers: string;   // see ScriptElementKindModifier, comma separated
         sortText: string;
+        type?: string;
         /**
          * An optional span that indicates the text to be replaced by this completion item. It will be
          * set if the required span differs from the one generated by the default replacement behavior and should
