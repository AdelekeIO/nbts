--- compiler/binder.ts
+++ compiler/binder.ts
@@ -221,7 +221,13 @@
                     // other kinds of value declarations take precedence over modules
                     symbol.valueDeclaration = node;
                 }
-        }
+            }
+
+            // netbeanstypescript: check for @deprecated comments before the declaration
+            var start = (node.kind === SyntaxKind.VariableDeclaration ? node.parent.parent : node).pos;
+            if (file.text.substring(start, skipTrivia(file.text, start)).indexOf("@deprecated") >= 0) {
+                symbol.flags |= SymbolFlags.Deprecated;
+            }
         }
 
         // Should not be called on a declaration with a computed property name,
--- compiler/checker.ts
+++ compiler/checker.ts
@@ -2184,6 +2184,13 @@
                         appendSymbolNameOnly(symbol, writer);
                     }
                     parentSymbol = symbol;
+
+                    // nbts: Parent may actually be an alias to a class/interface, not a
+                    // class/interface itself (TS issue #5464)
+                    if ((parentSymbol.flags & (SymbolFlags.Alias | SymbolFlags.Class | SymbolFlags.Interface))
+                            === SymbolFlags.Alias) {
+                        parentSymbol = resolveAlias(parentSymbol);
+                    }
                 }
 
                 // Let the writer know we just wrote out a symbol.  The declaration emitter writer uses
--- compiler/types.ts
+++ compiler/types.ts
@@ -2592,6 +2592,8 @@
         Optional                = 0x20000000,  // Optional property
         ExportStar              = 0x40000000,  // Export * declaration
 
+        Deprecated              = 0x80000000,
+
         Enum = RegularEnum | ConstEnum,
         Variable = FunctionScopedVariable | BlockScopedVariable,
         Value = Variable | Property | EnumMember | Function | Class | Enum | ValueModule | Method | GetAccessor | SetAccessor,
--- services/completions.ts
+++ services/completions.ts
@@ -110,6 +110,7 @@
                 kind: SymbolDisplay.getSymbolKind(typeChecker, symbol, location),
                 kindModifiers: SymbolDisplay.getSymbolModifiers(symbol),
                 sortText: "0",
+                type: typeChecker.typeToString(typeChecker.getTypeOfSymbolAtLocation(symbol, location))
             };
 
         }
--- services/goToDefinition.ts
+++ services/goToDefinition.ts
@@ -84,7 +84,9 @@
             const shorthandSymbolName = typeChecker.symbolToString(shorthandSymbol);
             const shorthandContainerName = typeChecker.symbolToString(symbol.parent, node);
             return map(shorthandDeclarations,
-                declaration => createDefinitionInfo(declaration, shorthandSymbolKind, shorthandSymbolName, shorthandContainerName));
+                // netbeanstypescript edit - node kind is more useful to distinguish the decls
+                //declaration => createDefinitionInfo(declaration, shorthandSymbolKind, shorthandSymbolName, shorthandContainerName));
+                declaration => createDefinitionInfo(declaration, getNodeKind(declaration), shorthandSymbolName, shorthandContainerName));
         }
 
         return getDefinitionFromSymbol(typeChecker, symbol, node);
@@ -133,7 +135,9 @@
             !tryAddCallSignature(symbol, node, symbolKind, symbolName, containerName, result)) {
             // Just add all the declarations.
             forEach(declarations, declaration => {
-                result.push(createDefinitionInfo(declaration, symbolKind, symbolName, containerName));
+                // netbeanstypescript edit - node kind is more useful to distinguish the decls
+                //result.push(createDefinitionInfo(declaration, symbolKind, symbolName, containerName));
+                result.push(createDefinitionInfo(declaration, getNodeKind(declaration), symbolName, containerName));
             });
         }
 
--- services/outliningElementsCollector.ts
+++ services/outliningElementsCollector.ts
@@ -38,6 +38,14 @@
                 let singleLineCommentCount = 0;
 
                 for (const currentComment of comments) {
+                    // netbeanstypescript: Don't fold comments with explicit <editor-fold>
+                    // directives, or those directives won't work
+                    if (/<\/?editor-fold\b/.test(sourceFile.text.substring(currentComment.pos, currentComment.end))) {
+                        singleLineCommentCount = 0;
+                        lastSingleLineCommentEnd = -1;
+                        isFirstSingleLineComment = true;
+                        continue;
+                    }
 
                     // For single line comments, combine consecutive ones (2 or more) into
                     // a single span from the start of the first till the end of the last
--- services/types.ts
+++ services/types.ts
@@ -560,6 +560,7 @@
         kind: string;            // see ScriptElementKind
         kindModifiers: string;   // see ScriptElementKindModifier, comma separated
         sortText: string;
+        type?: string;
         /**
           * An optional span that indicates the text to be replaced by this completion item. It will be
           * set if the required span differs from the one generated by the default replacement behavior and should
@@ -770,6 +771,7 @@
         export const ambientModifier = "declare";
         export const staticModifier = "static";
         export const abstractModifier = "abstract";
+        export const deprecatedModifier = "deprecated";
     }
 
     export class ClassificationTypeNames {
--- services/utilities.ts
+++ services/utilities.ts
@@ -984,6 +984,7 @@
         if (flags & ModifierFlags.Abstract) result.push(ScriptElementKindModifier.abstractModifier);
         if (flags & ModifierFlags.Export) result.push(ScriptElementKindModifier.exportedModifier);
         if (isInAmbientContext(node)) result.push(ScriptElementKindModifier.ambientModifier);
+        if (node.symbol && node.symbol.flags & SymbolFlags.Deprecated) result.push(ScriptElementKindModifier.deprecatedModifier);
 
         return result.length > 0 ? result.join(",") : ScriptElementKindModifier.none;
     }
@@ -1243,7 +1244,7 @@
     /**
      * The default is CRLF.
      */
-    export function getNewLineOrDefaultFromHost(host: LanguageServiceHost | LanguageServiceShimHost) {
+    export function getNewLineOrDefaultFromHost(host: LanguageServiceHost /*| LanguageServiceShimHost*/) {
         return host.getNewLine ? host.getNewLine() : carriageReturnLineFeed;
     }
 
